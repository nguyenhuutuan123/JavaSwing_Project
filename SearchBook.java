/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package book_management;

import Main_Screen.Home;
import com.mysql.jdbc.integration.c3p0.MysqlConnectionTester;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import com.sun.xml.internal.bind.v2.runtime.output.SAXOutput;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import static java.time.Clock.system;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tuan.nguyen1
 */
public class SearchBook extends javax.swing.JFrame {

    private Statement statement;
    private ResultSet resultSet;
    private Connection connection;
    private ResultSetMetaData resultSetMetaData;
    private Object ex;
    
    public void hienthibang() throws SQLException {
        String sqlStmt = null;
        String TK = tftimkiem.getText();
        String searchBy = Searchby.getSelectedItem().toString();
         
        if(searchBy.equals("IDBook")){
             sqlStmt ="   Select * from Book_Information where ID_Book like '"+TK+"%'";
        }else if (searchBy.equals("BookName")){
            sqlStmt ="   Select * from Book_Information where BookName like '"+ TK+"%'";
        }else if(searchBy.equals("Type")){
            sqlStmt ="   Select * from Book_Information where Type like '"+ TK+"%'";
        }else if(searchBy.equals("Author")){
            sqlStmt ="   Select * from Book_Information where Author like '"+ TK+"%'";
        }else if(searchBy.equals("DatePublish")){
            sqlStmt ="   Select * from Book_Information where DatePublish like '"+ TK+"%'";
        }else if(searchBy.equals("Status")){
            sqlStmt ="   Select * from Book_Information where Status like '"+ TK+"%'";
        }else if(searchBy.equals("Notes")){
            sqlStmt ="   Select * from Book_Information where Notes like '"+ TK+"%'";
        }
        
        // De new mot cau lenh
        statement = connection.createStatement();
        // Thuc hien cau lenh va result lay ve ket qua : 
        resultSet = statement.executeQuery(sqlStmt);
        // lay meta Data
        resultSetMetaData = resultSet.getMetaData();
        // tao mot model cho bang :
        DefaultTableModel model = new DefaultTableModel();
        // lay ve so cot cua bang
        int demcolum = resultSetMetaData.getColumnCount();
        // lay tieu de colum :
        Object[] tieude = new Object[demcolum];
        for (int i = 0; i < demcolum; i++) {
            tieude[i] = resultSetMetaData.getColumnName(i + 1);
        }
        // add model vao bang
        tableResult.setModel(model);
        // Tieu de cho bang :
        model.setColumnIdentifiers(tieude);
        // Noi dung cho bang
        while (resultSet.next() != false) {
            Object[] noidung = new Object[demcolum];
            for (int i = 0; i < demcolum; i++) {
                noidung[i] = resultSet.getString(i + 1);
            }
            model.addRow(noidung);
        }

    }
    public SearchBook() throws SQLException {
        setTitle("Search Book Information ");
        try {
            // Tao truy cap cho driver 
            Class.forName("com.mysql.jdbc.Driver");
            // Tao lenh truy cap den co so du lieu
            connection = DriverManager.getConnection("jdbc:mysql://localhost/Book_Menagement_Project?user=root&password=");
            // De new mot cau lenh
            statement = connection.createStatement();
            initComponents();
            // lay ngay mac dinh 
            //ngayxuatban1.setCalendar(Calendar.getInstance());
            //hienthibang();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Sign_Up.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResult = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        tftimkiem = new javax.swing.JTextField();
        Searchby = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        message = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(197, 239, 247));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(197, 239, 247));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Information ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 19))); // NOI18N

        tableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id Book", "Book Name", "Type", "Author", "DatePublish", "Status", "Notes"
            }
        ));
        jScrollPane1.setViewportView(tableResult);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 790, 290));

        jPanel2.setBackground(new java.awt.Color(197, 239, 247));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Book  Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 20))); // NOI18N

        Searchby.setBackground(new java.awt.Color(0, 255, 255));
        Searchby.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IDBook", "BookName", "Type", "Author", "DatePublish", "Status", "Notes" }));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        jLabel1.setText("Search by ");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        jLabel2.setText("Enter Search Information :  ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(tftimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Searchby, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Searchby, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tftimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 480, 150));

        jButton1.setBackground(new java.awt.Color(0, 255, 255));
        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 190, 80, 30));

        btSearch.setBackground(new java.awt.Color(0, 255, 255));
        btSearch.setText("Search");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });
        jPanel3.add(btSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 80, 30));

        jButton3.setBackground(new java.awt.Color(0, 255, 255));
        jButton3.setText("Canccel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 190, 80, 30));

        message.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        message.setForeground(new java.awt.Color(255, 0, 0));
        jPanel3.add(message, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, 390, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int a = JOptionPane.showConfirmDialog(rootPane, "Do you want to exit ? ", "Exit", JOptionPane.ERROR_MESSAGE);
        if(a==JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Home home = new Home();
        home.setVisible(true);
        home.pack();
        home.setLocationRelativeTo(null);
        home.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    
String Check(String name) {
       String publisher = null;
       String sql ;
       String searchBy = Searchby.getSelectedItem().toString();
       try {
           Statement stmt = connection.createStatement();
           if(searchBy.equals("IDBook")){
                sql = "Select *From Book_Information  Where ID_Book like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("ID_BOOK");
                }
           }else if(searchBy.equals("BookName")){
                sql = "Select *From Book_Information  Where BookName like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("BookName");
                }
           }else if(searchBy.equals("Type")){
               sql = "Select *From Book_Information  Where Type like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("Type");
                }
           }else if(searchBy.equals("Author")){
               sql = "Select *From Book_Information  Where Author like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("Author");
                }
           }else if(searchBy.equals("DatePublish")){
               sql = "Select *From Book_Information  Where DatePublish like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("DatePublish");
                }
           }else if(searchBy.equals("Status")){
               sql = "Select *From Book_Information  Where Status like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("Status");
                }
           }else{
               sql = "Select *From Book_Information  Where Notes like '"+ tftimkiem.getText() +"%'";
                ResultSet rls = stmt.executeQuery(sql);
                while (rls.next()) {
                publisher = rls.getString("Notes");
                }
           }
           
           
       } catch (Exception e) {
           e.printStackTrace();
       }
       return publisher;
   }
    
    
    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        message.setText("");
        String TK = tftimkiem.getText();
        String searchBy = Searchby.getSelectedItem().toString();
        
        if(TK .equals("")){
            message.setText("Please enter information into the box !");
        }else if(searchBy.equals("IDBook")){
            try {
                if(Check(TK)== null ){
                    message.setText("             This id does not exist !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where ID_Book like '"+ TK+"%'";
                    PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                    ResultSet rs = statement.executeQuery();
                    hienthibang();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (searchBy.equals("BookName")){
            try {
                if(Check(TK)== null ){
                    message.setText("             This name does not exist !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where BookName like '"+ TK+"%'";
                    PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                    ResultSet rs = statement.executeQuery();
                    hienthibang();
                }
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(searchBy.equals("Type")){
            try {
                if(Check(TK)== null ){
                    message.setText("             This type does not exist !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where Type like '"+ TK+"%'";
                
                PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                ResultSet rs = statement.executeQuery();
                hienthibang();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(searchBy.equals("Author")){
            try {
                if(Check(TK)== null ){
                    message.setText("             This author does not exist  !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where Author like '"+ TK+"%'";
                    PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                    ResultSet rs = statement.executeQuery();
                    hienthibang();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(searchBy.equals("DatePublish")){
            try {
                if(Check(TK)== null ){
                    message.setText("             This Date Publish does not exist  !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where DatePublish like '"+ TK+"%'";
                    PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                    ResultSet rs = statement.executeQuery();
                    hienthibang();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(searchBy.equals("Status")){
            try {
                if(Check(TK)== null ){
                    message.setText("              This status does not exist  !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where Status like '"+ TK+"%'";
                    PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                    ResultSet rs = statement.executeQuery();
                    hienthibang();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(searchBy.equals("Notes")){
            try {
                if(Check(TK)== null ){
                    message.setText("              This notes does not exist !");
                }else{
                    String sqlIDBook = "   Select * from Book_Information where Notes like '"+ TK+"%'";
                    PreparedStatement statement = connection.prepareStatement(sqlIDBook);
                    ResultSet rs = statement.executeQuery();
                    hienthibang();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(Book_Infor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
           
        
    }//GEN-LAST:event_btSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SearchBook().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(SearchBook.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Searchby;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel message;
    private javax.swing.JTable tableResult;
    private javax.swing.JTextField tftimkiem;
    // End of variables declaration//GEN-END:variables
}
